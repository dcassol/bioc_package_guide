[["index.html", "Bioconductor Package Guidelines for Developers and Reviewers Chapter 1 About Bioconductor", " Bioconductor Package Guidelines for Developers and Reviewers Kevin Rue-Albrecht 2021-05-21 Chapter 1 About Bioconductor Bioconductor provides tools for the analysis and comprehension of high-throughput genomic data. Bioconductor uses the R statistical programming language, and is open source and open development. It has two releases each year, and an active user community. Bioconductor is also available as an AMI (Amazon Machine Image) and Docker images. "],["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction The Bioconductor project promotes high-quality, well documented, and interoperable software. These guidelines help to achieve this objective; they are not meant to put undue burden on package authors, and authors having difficultly satisfying guidelines should seek advice on the bioc-devel mailing list. Package maintainers are urged to follow these guidelines as closely as possible when developing Bioconductor packages. General instructions for producing packages can be found in the Writing R Extensions manual, available from within R (RShowDoc(\"R-exts\")) or on the R web site. Remember these are the minimum requirements for package acceptance and the package will still be subject to other guidelines below and a formal technical review by trained Bioconductor package reviewer. "],["general-package-development.html", "Chapter 3 General Package Development 3.1 Version of Bioconductor and R 3.2 Correctness, Space and Time 3.3 R CMD check environment 3.4 README file", " Chapter 3 General Package Development 3.1 Version of Bioconductor and R Package developers should always use the devel version of Bioconductor when developing and testing packages to be contributed. Depending on the R release cycle, using Bioconductor devel may or may not involve also using the devel version of R. See the how-to on using devel version of Bioconductor for up-to-date information. 3.2 Correctness, Space and Time 3.2.1 R CMD build Bioconductor packages must minimally pass R CMD build (or R CMD INSTALL --build) and pass R CMD check with no errors and no warnings using a recent R-devel. Authors should also try to address all errors, warnings, and notes that arise during build or check.1 3.2.2 BiocCheck Packages must also pass BiocCheck::BiocCheckGitClone() and BiocCheck::BiocCheck() with no errors and no warnings. The BiocCheck package is a set of tests that encompass Bioconductor Best Practices. Every effort should be made to address any notes that arise during this build or check.2 3.2.3 File names Do not use filenames that differ only in case, as not all file systems are case-sensitive. 3.2.4 Package size The source package resulting from running R CMD build should occupy less than 5 MB on disk. 3.2.5 Check duration The package should require less than 10 minutes to run R CMD check --no-build-vignettes. Using the --no-build-vignettes option ensures that the vignette is built only once.3 3.2.6 Memory Vignette and man page examples should not use more than 3 GB of memory since R cannot allocate more than this on 32-bit Windows. 3.2.7 Individual file size For software packages, individual files must be &lt;= 5MB. This restriction exists even after the package is accepted and added to the Bioconductor repository. 3.2.8 Undesirable files The raw package directory should not contain unnecessary files, system files, or hidden files such as .DS_Store, .project, .git, cache files, log files, *.Rproj, *.so, etc. These files may be present in your local directory but should not be commited to git (see .gitignore). 3.3 R CMD check environment It is possible to activate or deactivate a number of options in R CMD build and R CMD check. Options can be set as individual environment variables or they can be listed in a file. Descriptions of all the different options available can be found here. Bioconductor has chosen to customize some of these options for incoming submission during R CMD check. The file of utilized flags can be downloaded from GitHub. The file can either be placed in a default directory as directed here or can be set through environment variable R_CHECK_ENVIRON with a command similar to: export R_CHECK_ENVIRON = &lt;path to downloaded file&gt; 3.4 README file If a README file is included in the package or the Github repository and it provides installation instructions, those instruction should also include Bioconductor installation instructions. If a README.Rmd is provided (rather than README.md, or other) those installation instructions should be in an eval=FALSE code chunk. Nowhere in the code (R code, man pages, vignettes, Rmd files) should someone try to install or download system dependencies, applications, packages, etc. Developers can provide instructions to follow but not executed and should assume all necessary dependencies, applications, or packages are already set up on a user’s system. The Bioconductor team member assigned to review the package during the submission process will expect all ERROR, WARNINGS, and NOTES to be addressed. If there are any remaining, a justification of why they are not corrected will be expected.↩︎ The Bioconductor team member assigned to review the package during the submission process will expect all ERROR, WARNINGS, and NOTES to be addressed. If there are any remaining, a justification of why they are not corrected will be expected.↩︎ This is true only for Software Packages. Experiment Data, Annotation, and Workflow packages are allowed additional space and check time.↩︎ "],["the-description-file.html", "Chapter 4 The DESCRIPTION file 4.1 Fields", " Chapter 4 The DESCRIPTION file The DESCRIPTION file must be properly formatted. The following section will review some important notes regarding fields of the DESCRIPTION file and associated files. 4.1 Fields 4.1.1 Package This is the name of the package. This should match the GitHub repository name and is case-sensitive. A package name should be descriptive and should not already exist as a current package (case-insensitive) in Bioconductor nor CRAN. Avoid names that are easily confused with existing package names, or that imply a temporal (e.g., ExistingPackage2) or qualitative (e.g., ExistingPackagePlus) relationship. An easy way to check whether your name is already in use is to check that the following command fails: if (!requireNamespace(&quot;BiocManager&quot;)) { install.packages(&quot;BiocManager&quot;) } BiocManager::install(&quot;MyPackage&quot;) 4.1.2 Title This is a brief but descriptive title for the package. 4.1.3 Version All Bioconductor packages use an x.y.z version scheme. See Version Numbering for specifics to how the release and devel Bioconductor versioning proceeds. When first submitted to Bioconductor, a package should have pre-release version 0.99.0. The following rules apply: x is usually 0 for packages that have not yet been released. y is even for packages in release, and odd for packages in devel. Generally, do not bump this number especially in pre-release. z is incremented whenever committing changes to a package. 4.1.4 Description The description should be a relatively short but detailed overview of what the package functionality entails. It should be at least three complete sentences. 4.1.5 Authors@R The Authors@R field should be used. A maintainer designation (cre for Authors@R) is required with an actively maintained email address. This email address will be used for contact regarding any issues that arise with the package in the future. For persons with an ORCiD identifier provide the identifier via an element named “ORCID” in the comment argument of person(). For example: person(&quot;Lori&quot;, &quot;Shepherd&quot;, email = Lori.Shepherd@roswellpark.org, role = c(&quot;cre&quot;, &quot;aut&quot;), comment = c(ORCID = &quot;0000-0002-5910-4010&quot;)) Only one person should be listed as the Maintainer to ensure a single point of contact. This person by default will have commit access to the git repository on git.bioconductor.org. Commit access can be given to other developers by request on the bioc-devel mailing list. Another option is to add collaborators to the GitHub repository. This approach enables development by many but restricts push access to git.bioconductor.org. 4.1.6 License The license field should preferably refer to a standard license (see wikipedia) using one of R’s standard specifications. Be specific about any version that applies (e.g., GPL-2). Licenses restricting use, e.g., to academic or non-profit researchers, are not suitable for Bioconductor. Core Bioconductor packages are typically licensed under Artistic-2.0. To specify a non-standard license, include a file named LICENSE in your package (containing the full terms of your license) and use the string file LICENSE in this License: field. The package should contain only code that can be redistributed according to the package license. Be aware of the licensing agreements for packages you are depending on in your package. Not all packages are open source even if they are publicly available. 4.1.7 LazyData For packages that include data, we recommend not including LazyData: TRUE. However, this rarely proves to be a good thing. In our experience it only slows down the loading of packages with large data. 4.1.8 Depends, Imports, Suggests, Enhances All packages must be available via Bioconductor or CRAN; the use of the Remotes: field is not supported, hence dependencies only available on other repositories (e.g.  GitHub) are not allowed. Reuse, rather than re-implement or duplicate, well-tested functionality from other packages. Make use of appropriate existing packages (e.g., biomaRt, AnnotationDbi, Biostrings) and classes (e.g., SummarizedExperiment, GRanges, Rle, DNAStringSet), and avoid duplication of functionality available in other Bioconductor packages. See Common Bioconductor Methods and Classes. Bioconductor reviewers are very strict on this point! New packages should be interoperable with existing Bioconductor classes and should not reimplement functionality especially with regards to importing/reading data. A package can be listed only once between Depends:, Imports:, Suggests:, or Enhances:. Determine placement of package based on the following guidelines: Imports: is for packages that provide functions, methods, or classes that are used inside your package name space. Most packages are listed here. Depends: is for packages that provide essential functionality for users of your package, e.g., the GenomicRanges package is listed in the Depends: field of GenomicAlignments. It is unusual for more than three packages to be listed as Depends:. Suggests: is for packages used in vignettes, examples, and in conditional code. Commonly, annotation and experiment packages (e.g., TxDb*) used in vignette and example code are included in this field thus avoiding users a costly download. In the case where an external one-off function is required for package code, external package availability can be checked via if (!requireNamespace('extraPKG')) stop(...). Enhances: is for packages such as Rmpi or parallel that enhance the performance of your package, but are not strictly needed for its functionality. It is seldom necessary to specify or specific versions as dependencies, since the Bioconductor release strategy and standard installation instructions guarantee these constraints. Repositories mirrored outside Bioconductor should include branches for each Bioconductor release, and may find it useful to fully specify versions to enforce constraints otherwise guaranteed by Bioconductor installation practices. 4.1.9 SystemRequirements This field is for listing any external software which is required, but not automatically installed by the normal package installation process. If the installation process is non-trivial, a top-level README file should be included to document the process. 4.1.10 biocViews This field is required! Specify at least two leaf node from biocViews. Multiple leaf terms are encouraged but terms must come from the same trunk or package type (i.e., Software, AnnotationData, ExperimentData, or Workflow). 4.1.11 BugReports It is encouraged to include the relevant links to GitHub for reporting issues. 4.1.12 URL This field directs users to source code repositories, additional help resources, etc; details are provided in the Writing R Extensions manual, RShowDoc(\"R-exts\"). 4.1.13 Video This field displays links to instructional videos. 4.1.14 Collates This may be necessary to order class and method definitions appropriately during package installation. 4.1.15 BiocType This is required if submitting a Docker or Workflow. Otherwise this field could optionally define the type of Bioconductor package Software, ExperimentData, Annotation. "],["the-namespace-file.html", "Chapter 5 The NAMESPACE file 5.1 Function names 5.2 Imported functions 5.3 Exported functions", " Chapter 5 The NAMESPACE file A NAMESPACE file defines the functions, classes, and methods that are imported into the namespace, and exported for users. In the following section we describe what Bioconductor reviewers will be looking for in this file. 5.1 Function names Exported functions should use camel case or underscoring and not include ., which indicates S3 dispatch. 5.2 Imported functions Generally importFrom() is encouraged over importing an entire package. However, if there are many functions from a single package, import() can be acceptable. 5.3 Exported functions Exporting all functions with exportPattern(\"^[[:alpha:]]+\") is strongly discouraged. Functions and generics should be exported individually, for clarity and control. "],["the-news-file.html", "Chapter 6 The NEWS file", " Chapter 6 The NEWS file A NEWS file should be included to keep track of changes to the code from one version to the next. It can be a top level file or in the inst/ directory. Only one NEWS file should exist in the repository. The following are acceptable locations and formats: location format ./inst/NEWS.Rd \\(\\LaTeX\\) ./inst/NEWS formatted text see ?news ./inst/NEWS.md markdown ./NEWS.md markdown ./NEWS formatted text see ?news Specifics on formatting can be found on the help page for ?news. Bioconductor uses the NEWS file to create the semi-annual release announcement. It must include list elements and cannot be a plain text file. An example format: Changes in version 0.99.0 (2018-05-15) + Submitted to Bioconductor Changes in version 1.1.1 (2018-06-15) + Fixed bug. Begin indexing from 1 instead of 2 + Made the following significant changes o added a subsetting method o added a new field to database After you install your package, the following can be run to see if the NEWS is properly formatted: utils::news(package=&quot;&lt;name of your package&gt;&quot;) The output should look similar to the following: Changes in version 1.1.1 (2018-06-15): o Fixed bug. Begin indexing from 1 instead of 2 o Made the following significant changes o added a subsetting method o added a new field to database Changes in version 0.99.0 (2018-05-15): o Submitted to Bioconductor If you get something like the following there are formatting errors that need to be corrected: Version: 0.99.0 Date: 2018-05-15 Text: Submitted to Bioconductor Version: 1.1.1 Date: 2018-06-15 Text: Fixed bug. Begin indexing from 1 instead of 2 Version: 1.1.1 Date: 2018-06-15 Text: Made the following significant changes o added a subsetting method o added a new field to database "],["the-citation-file.html", "Chapter 7 The CITATION file", " Chapter 7 The CITATION file Appropriate citations must be included in help pages (e.g., in the see also section) and vignettes; this aspect of documentation is no different from any scientific endeavor. The file inst/CITATION can be used to specify how a package is to be cited. If this option is utilized, a maintainer can check proper formatting of the CITATION file by running readCitationFile(\"inst/CITATION\"); This must run without error for the citation to be accurately displayed on the package landing page. Whether or not a CITATION file is present, an automatically-generated citation will appear on the package landing page on the Bioconductor web site. For optimal formatting of author names (if a CITATION file is not present), specify the package author and maintainer using the Authors@R field as described in the Writing R Extensions manual. "],["references.html", "References", " References "]]
